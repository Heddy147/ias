# 1. Einleitung

Die Applikation "Oldtimer-Rennen" dient zur Festhaltung und Verwaltuing von Fahrzeugen, Fahrzeugklassen, Rennen, Anmeldungen, Zeiten (für Qualifiaktion und für Rennen).
Es können sich Fahrzeugbesitzer selbstständig anmelden.
Rennleiter können nur durch einen Administrator angelegt werden.

Für weitere Spezifikationen verweisen wir auf die Praktikums-Dokumentation 2.

# 2. Entwurf der Anwendung

## 2.1 Benutzungsschnittstelle

### 2.1.1 Anwendungsrahmen und einzelne Sichten

#### Login
Der Benutzer muss ein Benutzername und Passwort eingeben. Je nach Rolle wird er nach erfolgreichem "Einloggen" zum jeweiligen Dashboard weitergeleitet.

#### Registrieren
Der Benutzer kann sich mit einem Benutzernamen und einem Passwort registrieren.

#### Dashboard (Besitzer)
Auf dem Dashboard des Besitzer findet der Besitzer eine Übersicht seiner Fahrzeuge und seiner Anmeldungen an Rennen.
Von hier aus gelangt er zu seinen anderen Sichten.

#### Neue Person (Besitzer)
Der Besitzer muss die Daten einer Person (für seine Teams) eingeben.

#### Person bearbeiten (Besitzer)
Der Besitzer kann die Daten der ausgewählten Person (für seine Teams) ändern.

#### Liste aller Rennen (Besitzer)
Der Benutzer bekommt eine Liste ALLER Rennen angezeigt. Von hier aus gelangt er auch zu einer Anmeldung an ein Rennen.

#### Anmeldung an Rennen (Besitzer)
Der Besitzer kann sich an ein Rennen anmelden. Er muss dazu ein Fahrzeug auswählen.

#### Neues Fahrzeug (Besitzer)
Der Besitzer muss die Daten seines Fahrzeugs eingeben.

#### Fahrzeug bearbeiten (Besitzer)
Der Besitzer kann die Daten des ausgewählten Fahrzeugs ändern.

#### Dashboard (Leiter)
Je nach Status des eigenen Rennens bekommt ein Rennleiter eine Liste seines Rennens angezeigt.
Wenn der Leiter kein aktuelles Rennen am laufen hat, wird dem Leiter lediglich eine Möglichkeit geboten ein neues Rennen anzulegen.

Sollte ein Rennen vorhanden sein, werden dem Leiter die Stammdaten dieses Rennens angezeigt.
Je nach Status des Rennens kann er von dieser Ansicht aus in eine Oberfläche gelangen, auf der er die Qualifikations-Ergebnisse oder Renn-Ergebnisse eintragen kann.

Außerdem wird dem Leiter ein Verweis für die Anmeldungen am Rennen angezeigt.
Sollte das Rennen in der Anmeldephase sein, wird ebenfalls ein Verweis zu den Stationen angeboten.

#### Anmeldungen Liste (Leiter)
In dieser Ansicht wird dem Leiter eine Liste von allen Anmeldungen am Rennen angezeigt.
Von hier aus kann er die eingetragenen Personen (Fahrer, Beifahrer, Mechaniker) und Fahrzeuge bearbeiten, allerdings **NICHT** löschen.
Außerdem wird ein Button pro Eintrag *Löschen* angezeigt. Bei Betätigen dieses Buttons wird die Anmeldung aus dem System gelöscht.

#### Stationen Liste (Leiter)
Gelangt der Leiter in diese Ansicht, wird eine Liste von allen Stationen angezeigt, die dem Rennen beigefügt worden sind.
Diese können - analog zu den Anmeldungen - mittels eines Buttons gelöscht werden.
Außerden gelangt man von hier aus in die Ansicht zum Hinzufügen einer Station.
Stationen können **NICHT** geändert werden.

#### Station hinzufügen (Leiter)
In dieser Ansicht können die Stammdaten einer neuen Station eingetragen und gespeichert werden.

#### Fahrzeugklassen hinzufügen (Leiter)
In dieser Ansicht können die Stammdaten einer neuen Fahrzeugklasse eingetragen und gespeichert werden.

#### Fahrzeugklassen bearbeiten (Leiter)
In dieser Ansicht können die Stammdaten einer neuen Fahrzeugklasse geändert werden.

#### Qualifikationsergebnisse eintragen (Leiter)
Es wird eine Liste aller Anmeldungen angezeigt. Dabei sind aber nur die wichtigsten Informationen zu jeder Anmeldung sichtbar.
Zu jedem Eintrag gibt es 2 Felder: "Zeit", "Qualifiziert".
Werden diese Felder komplett ausgefüllt und gespeichert, werden die Startplätze für das Rennen automatisch berechnet.

#### Rennergebnisse eintragen (Leiter)
Analog zu Ansicht "Qualifikationsergebnisse eintragen" werden Anmeldungen mit den wichtigsten Informationen angezeigt.
Hier gibt es jedoch für jede Station ein "Zeitfeld" und 1 weiteres Feld namens "Stationen in der richtigen Reihenfolge".
Auch hier werden die Gesamtzeiten und Platzierungen automatisch berechnet.

### 2.1.2 Zustandsmodell

**HIER KOMMT BILD**

## 2.2 Datenaustausch Client - Server (REST) {#abschnitt_2_2}
Der Datenaustausch zwischen dem Client und dem Server erfolgt über eine REST-Schnittstelle. Dafür gibt es im Framework "CherryPy" eine bestimmte Funktion, die die HTTP-Request-Methoden (GET, POST, PUT, DELETE) automatisch zu den richtigen Methoden der jeweiligen Klasse führt.
Jede HTTP-Request-Methode hat also eine eigene Klassenmethode.

Folgende Methoden für verschiedene Datensätze werden unterstützt:

+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
| Datensatz 		   | Methode 			   | URL					| Benötigte Parameter 															|
+======================+=======================+========================+===============================================================================+
| Anmeldung 		   | GET, POST, PUT, DELETE| /api/anmeldungen		| GET: [id], [rennId], [fahrzeugId];											|
|					   |					   | 						| POST: rennId, fahrzeugId;														|
|					   |					   | 						| PUT: id, rennId, fahrzeugId;													|
|					   |					   | 						| DELETE: id 																	|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
| Fahrzeug 			   | GET, POST, PUT, DELETE| /api/fahrzeuge			| GET: [id];																	|
|					   |					   | 						| POST: marke, typ, baujahr, hubraum, leistung, beschreibung,					|
|					   |					   | 						|	    kennzeichen, fahrerId, beifahrerId, mechanikerId;						|
|					   |					   | 						| PUT: id, marke, typ, baujahr, hubraum, leistung, beschreibung,				|
|					   |					   | 						|	   kennzeichen, fahrerId, beifahrerId, mechanikerId;						|
|					   |					   | 						| DELETE: id 																	|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
|Fahrzeugklasse 	   | GET, POST, PUT, DELETE| /api/fahrzeugeklassen	| GET: [id];																	|
|					   |					   | 						| POST: bezeichnung, beschreibung, zeit_in_millisekunden, zeit_in_string;		|
|					   |					   | 						| PUT: id, bezeichnung, beschreibung, zeit_in_millisekunden, zeit_in_string;	|
|					   |					   | 						| DELETE: id 																	|
|Login 				   | PUT, DELETE		   | 						| PUT: benutzename, passwort													|
|					   | 					   | 						| DELETE:																		|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
|Person 			   | GET, POST, PUT, DELETE| /api/personen			| GET: [id]; 																	|
|					   |					   | 						| POST: vorname, nachname, fuehrerschein; 										|
|					   |					   | 						| PUT: id, vorname, nachname, fuehrerschein; 									|
|					   |					   | 						| DELETE: id 																	|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
|Qualifikationsergebnis| POST				   | /api/qualiergebnisse	| POST: ergebnisse, rennId														|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
|Registrierung 		   | POST				   | /api/registrieren		| POST: benutzername, passwort													|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
|Rennen 			   | GET, POST, PUT, DELETE| /api/rennen			| GET: [id]; 																	|
|					   |					   | 						| POST: bezeichnung, beschreibung, datum;										|
|					   |					   | 						| PUT: id, bezeichnung, beschreibung, datum;									|
|					   |					   | 						| DELETE: id 																	|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
|Rennergebnis		   | POST				   | /api/rennergebnisse	| POST: ergebnisse, rennId														|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+
|Station 			   | GET, POST, PUT, DELETE| /api/stationen			| GET: [id], [rennId]; 															|
|					   |					   | 						| POST: bezeichnung, lage, beschreibung, rennId;								|
|					   |					   | 						| PUT: id, bezeichnung, lage, beschreibung, rennId;								|
|					   |					   | 						| DELETE: id 																	|
+----------------------+-----------------------+------------------------+-------------------------------------------------------------------------------+

Folgende Aktionen werden durch die verschiedenen HTTP-Request-Methoden ausgeführt:

**GET**
Datensätze werden geladen und zum Client geschickt.
Dabei können optional Parameter übergeben werden, welche die Ergebnisse schon auf dem Server filtern. Die Parameter-Namen sind analog zu den Feldern eines Datensatzes.

**POST**
Es wird ein neue Datensatz eingetragen. Die Felder sind alle Pflicht und müssen zumindest LEER mit übertragen werden.

**PUT**
Es wird ein vorhandener Datensatz aktualisiert. Auch hier müssen die Felder alle angegeben werden, wenn auch LEER.
Der Datensatz mit der ID "id" wird aktualisiert.

**DELETE**
Ein vorhandener Datensatz wird anhand der "id" gelöscht.

Es gibt allerdings eine Ausnahme: **Login**:

- Mit der Methode "PUT" meldet man sich im System an.
- Mit der Methode "DELETE" meldet man sich vom System ab.



# 3. Implementierung der Anwendung

## 3.1 Web-Client

Auf der Client-Seite ist der Datenaustausch über Ajax ausschlaggebend. Sowohl Templates als auch Daten werden über Ajax gesendet und empfangen.

Zusätzlich wurden verschiedene Bibliotheken verwendet. Darunter zu finden sind **jQuery**, **uikit**, **TemplateEngine (by Dr. Beims)** und **EventService (by Dr. Beims)**.
Die verschiedenen Bibiliotheken ermöglichen uns eine einfachere und schneller Implementierung von gleichen JavaScript-Abläufen.
Zusätzlich stellen einige der Bibliotheken gewisse Funktionen bereit, mit welchen man schnell Templates vorbereiten kann und diese automatisch von der Funktion gerendert und eingefügt werden.

### jQuery

- Bietet fertige Funktionen, welche im Hintergrund native JavaScript-Funktionen ausführt.
- [Download](https://jquery.com/)

### uikit

- CSS-Framework
- Grid-View
- Responsive
- Bietet viele Klassen, um ein einheitliches Bild zu schaffen
- [Download](http://getuikit.com/)

### TemplateEngine (by Dr. Beims)

- Bibliothek zum Verwalten, Laden und automatischen Renderns von Templates

### EventService (by Dr. Beims)

- Bibliothek zum Verwalten von Events, auch benutzerdefinierte Events

## 3.2. Web-Server

Der Web-Server wurde mit der Programmierungssprache **Python** geschrieben. Dafür wurde ein Framework namens **CherryPy**, welches mit wenigen Zeilen Code einen komplett funktionstüchtigen Webserver zur verfügung stellt.
Da die meisten Anfragen über Ajax vom Client gesendet werden und eine REST-Schnittstelle dafür bestens geeignet ist, hilft uns **CherryPy** auch dabei weiter.
Das Framework ermittelt die HTTP-Request-Methode und führt anhand dieser Methode automatisch die dafür vorgesehene Klassenmethode aus.

Weiteres siehe [Abschnitt 3.2.1](#abschnitt3_2_1)

### 3.2.1 Bearbeitung der Anfragen {#abschnitt3_2_1}

Wie schon erwähnt werden die HTTP-Request-Methoden automatisch vom Framework ermittelt und **CherryPy** führt die dafür vorgesehene Klassenmethode aus.
Praktischerweise heißen die Klassenmethoden genauso wie die HTTP-Request-Methoden, also *GET*, *POST*, *PUT*, *DELETE*, usw.
Wir benötigen nur die gerade aufgezählten Methoden.

Was welche Methode macht, wurde bereits in [Abschnitt 2.2](#abschnitt_2_2) ausführlich erläutert.

### 3.2.2 Speicherung von Daten

Die Daten werden mittels eines *JSON-Strings* in verschiedene Dateien gespeichert. Dafür erhält jeder Datensatz eine eindeutige Kennung (ID), welche für das JSON-Objekt als Key verwendet wird.